// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using SweatFlexEF.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SweatFlexEF.Models
{
    public partial class SweatFlexContext
    {
        private ISweatFlexContextProcedures _procedures;

        public virtual ISweatFlexContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SweatFlexContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISweatFlexContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
        }
    }

    public partial class SweatFlexContextProcedures : ISweatFlexContextProcedures
    {
        private readonly SweatFlexContext _context;

        public SweatFlexContextProcedures(SweatFlexContext context)
        {
            _context = context;
        }

        public virtual async Task<int> CreateUserAsync(string UserIdInput, int? RoleInput, string FirstNameInput, string LastNameInput, string EmailInput, string PasswordInput, string CoachIdInput, string SaltInput, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserIdInput",
                    Size = 50,
                    Value = UserIdInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleInput",
                    Value = RoleInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FirstNameInput",
                    Size = 50,
                    Value = FirstNameInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastNameInput",
                    Size = 50,
                    Value = LastNameInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmailInput",
                    Size = 200,
                    Value = EmailInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordInput",
                    Size = 200,
                    Value = PasswordInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CoachIdInput",
                    Size = 50,
                    Value = CoachIdInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaltInput",
                    Size = 200,
                    Value = SaltInput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CreateUser] @UserIdInput, @RoleInput, @FirstNameInput, @LastNameInput, @EmailInput, @PasswordInput, @CoachIdInput, @SaltInput", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
